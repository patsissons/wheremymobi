# source: https://us1.prisma.sh/pat-sissons-fe92fd/where-my-mobi/dev
# timestamp: Wed Sep 05 2018 21:56:06 GMT-0700 (Pacific Daylight Time)

type AggregateStation {
  count: Int!
}

type AggregateStationStatus {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStation(data: StationCreateInput!): Station!
  createStationStatus(data: StationStatusCreateInput!): StationStatus!
  updateStation(data: StationUpdateInput!, where: StationWhereUniqueInput!): Station
  updateStationStatus(data: StationStatusUpdateInput!, where: StationStatusWhereUniqueInput!): StationStatus
  deleteStation(where: StationWhereUniqueInput!): Station
  deleteStationStatus(where: StationStatusWhereUniqueInput!): StationStatus
  upsertStation(where: StationWhereUniqueInput!, create: StationCreateInput!, update: StationUpdateInput!): Station!
  upsertStationStatus(where: StationStatusWhereUniqueInput!, create: StationStatusCreateInput!, update: StationStatusUpdateInput!): StationStatus!
  updateManyStations(data: StationUpdateInput!, where: StationWhereInput): BatchPayload!
  updateManyStationStatuses(data: StationStatusUpdateInput!, where: StationStatusWhereInput): BatchPayload!
  deleteManyStations(where: StationWhereInput): BatchPayload!
  deleteManyStationStatuses(where: StationStatusWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  stations(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Station]!
  stationStatuses(where: StationStatusWhereInput, orderBy: StationStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StationStatus]!
  station(where: StationWhereUniqueInput!): Station
  stationStatus(where: StationStatusWhereUniqueInput!): StationStatus
  stationsConnection(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StationConnection!
  stationStatusesConnection(where: StationStatusWhereInput, orderBy: StationStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StationStatusConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Station implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lat: Float!
  lng: Float!
  status(where: StationStatusWhereInput, orderBy: StationStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StationStatus!]
}

"""A connection to a list of items."""
type StationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StationEdge]!
  aggregate: AggregateStation!
}

input StationCreateInput {
  name: String!
  lat: Float!
  lng: Float!
  status: StationStatusCreateManyWithoutStationInput
}

input StationCreateOneWithoutStatusInput {
  create: StationCreateWithoutStatusInput
  connect: StationWhereUniqueInput
}

input StationCreateWithoutStatusInput {
  name: String!
  lat: Float!
  lng: Float!
}

"""An edge in a connection."""
type StationEdge {
  """The item at the end of the edge."""
  node: Station!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
}

type StationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lat: Float!
  lng: Float!
}

type StationStatus implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  station(where: StationWhereInput): Station!
  operative: Boolean!
  total: Int!
  free: Int!
  bikes: Int!
}

"""A connection to a list of items."""
type StationStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StationStatusEdge]!
  aggregate: AggregateStationStatus!
}

input StationStatusCreateInput {
  operative: Boolean!
  total: Int!
  free: Int!
  bikes: Int!
  station: StationCreateOneWithoutStatusInput!
}

input StationStatusCreateManyWithoutStationInput {
  create: [StationStatusCreateWithoutStationInput!]
  connect: [StationStatusWhereUniqueInput!]
}

input StationStatusCreateWithoutStationInput {
  operative: Boolean!
  total: Int!
  free: Int!
  bikes: Int!
}

"""An edge in a connection."""
type StationStatusEdge {
  """The item at the end of the edge."""
  node: StationStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StationStatusOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  operative_ASC
  operative_DESC
  total_ASC
  total_DESC
  free_ASC
  free_DESC
  bikes_ASC
  bikes_DESC
}

type StationStatusPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  operative: Boolean!
  total: Int!
  free: Int!
  bikes: Int!
}

type StationStatusSubscriptionPayload {
  mutation: MutationType!
  node: StationStatus
  updatedFields: [String!]
  previousValues: StationStatusPreviousValues
}

input StationStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StationStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StationStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StationStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StationStatusWhereInput
}

input StationStatusUpdateInput {
  operative: Boolean
  total: Int
  free: Int
  bikes: Int
  station: StationUpdateOneWithoutStatusInput
}

input StationStatusUpdateManyWithoutStationInput {
  create: [StationStatusCreateWithoutStationInput!]
  connect: [StationStatusWhereUniqueInput!]
  disconnect: [StationStatusWhereUniqueInput!]
  delete: [StationStatusWhereUniqueInput!]
  update: [StationStatusUpdateWithWhereUniqueWithoutStationInput!]
  upsert: [StationStatusUpsertWithWhereUniqueWithoutStationInput!]
}

input StationStatusUpdateWithoutStationDataInput {
  operative: Boolean
  total: Int
  free: Int
  bikes: Int
}

input StationStatusUpdateWithWhereUniqueWithoutStationInput {
  where: StationStatusWhereUniqueInput!
  data: StationStatusUpdateWithoutStationDataInput!
}

input StationStatusUpsertWithWhereUniqueWithoutStationInput {
  where: StationStatusWhereUniqueInput!
  update: StationStatusUpdateWithoutStationDataInput!
  create: StationStatusCreateWithoutStationInput!
}

input StationStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StationStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StationStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StationStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  operative: Boolean

  """All values that are not equal to given value."""
  operative_not: Boolean
  total: Int

  """All values that are not equal to given value."""
  total_not: Int

  """All values that are contained in given list."""
  total_in: [Int!]

  """All values that are not contained in given list."""
  total_not_in: [Int!]

  """All values less than the given value."""
  total_lt: Int

  """All values less than or equal the given value."""
  total_lte: Int

  """All values greater than the given value."""
  total_gt: Int

  """All values greater than or equal the given value."""
  total_gte: Int
  free: Int

  """All values that are not equal to given value."""
  free_not: Int

  """All values that are contained in given list."""
  free_in: [Int!]

  """All values that are not contained in given list."""
  free_not_in: [Int!]

  """All values less than the given value."""
  free_lt: Int

  """All values less than or equal the given value."""
  free_lte: Int

  """All values greater than the given value."""
  free_gt: Int

  """All values greater than or equal the given value."""
  free_gte: Int
  bikes: Int

  """All values that are not equal to given value."""
  bikes_not: Int

  """All values that are contained in given list."""
  bikes_in: [Int!]

  """All values that are not contained in given list."""
  bikes_not_in: [Int!]

  """All values less than the given value."""
  bikes_lt: Int

  """All values less than or equal the given value."""
  bikes_lte: Int

  """All values greater than the given value."""
  bikes_gt: Int

  """All values greater than or equal the given value."""
  bikes_gte: Int
  station: StationWhereInput
}

input StationStatusWhereUniqueInput {
  id: ID
}

type StationSubscriptionPayload {
  mutation: MutationType!
  node: Station
  updatedFields: [String!]
  previousValues: StationPreviousValues
}

input StationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StationWhereInput
}

input StationUpdateInput {
  name: String
  lat: Float
  lng: Float
  status: StationStatusUpdateManyWithoutStationInput
}

input StationUpdateOneWithoutStatusInput {
  create: StationCreateWithoutStatusInput
  connect: StationWhereUniqueInput
  delete: Boolean
  update: StationUpdateWithoutStatusDataInput
  upsert: StationUpsertWithoutStatusInput
}

input StationUpdateWithoutStatusDataInput {
  name: String
  lat: Float
  lng: Float
}

input StationUpsertWithoutStatusInput {
  update: StationUpdateWithoutStatusDataInput!
  create: StationCreateWithoutStatusInput!
}

input StationWhereInput {
  """Logical AND on all given filters."""
  AND: [StationWhereInput!]

  """Logical OR on all given filters."""
  OR: [StationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
  status_every: StationStatusWhereInput
  status_some: StationStatusWhereInput
  status_none: StationStatusWhereInput
}

input StationWhereUniqueInput {
  id: ID
}

type Subscription {
  station(where: StationSubscriptionWhereInput): StationSubscriptionPayload
  stationStatus(where: StationStatusSubscriptionWhereInput): StationStatusSubscriptionPayload
}
