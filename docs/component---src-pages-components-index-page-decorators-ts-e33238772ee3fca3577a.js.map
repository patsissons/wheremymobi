{"version":3,"sources":["webpack:///./src/station/Node.ts","webpack:///./src/data/transform/Smoove.ts","webpack:///./src/station/Station.ts","webpack:///./src/data/config.ts","webpack:///./src/data/StationSource.ts","webpack:///./src/pages/components/IndexPage/decorators.ts"],"names":["StationNode","station","this","prototype","toString","isValid","number","name","bikes","free","createClass_default","key","get","Number","isInteger","total","isFinite","lat","lng","test","errors","length","every","x","create","data","Object","assign","operative","createStation","avl_bikes","free_slots","total_slots","_ref","match","exec","Error","error","push","parseNameAndNumber","position","parseLatLng","coordinates","map","StationSourceType","_ref2","result","configMap","Map","location","type","uri","cors","StationSource","config","transform","verboseOutput","process","configOrKey","debug","toLowerCase","getConfig","Smoove","mapTransform","nearest","options","Array","from","values","distance","google","maps","geometry","spherical","computeDistanceBetween","LatLng","sort","a","b","getConfigByLocation","_proto","getJSON","headers","undefined","ajax","getStations","source","_this","pipe","tap","response","stations","nodes","fetchedAt","moment","catchError","message","of","watchStations","reloader","interval","_this2","merge","timer","debounceTime","mergeMap","_len","arguments","args","_key","console","log","setObservableConfig","fromESObservable","params","withQueryParams","withProps","URLSearchParams","window","search","forEach","value","set","withPosition","enableHighAccuracy","Observable","observer","navigator","geolocation","watchPosition","next","mapPropsStream","props","combineLatest","startWith","prev","withStations","defaultKey","Subject","stationsObservable","filter","Boolean","distinctUntilChanged","_ref3","reload"],"mappings":"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","file":"component---src-pages-components-index-page-decorators-ts-e33238772ee3fca3577a.js","sourcesContent":["import {Station} from './Station';\n\nexport class StationNode {\n  public readonly station: Station;\n\n  constructor(station: Station) {\n    this.station = station;\n  }\n\n  public get isValid() {\n    return [\n      Number.isInteger(this.station.bikes),\n      Number.isInteger(this.station.free),\n      Number.isInteger(this.station.total),\n      Number.isInteger(this.station.number),\n      this.station.number > 0,\n      Number.isFinite(this.station.lat),\n      this.station.lat !== 0,\n      Number.isFinite(this.station.lng),\n      this.station.lng !== 0,\n      /^\\w/.test(this.station.name),\n      this.station.errors.length === 0,\n    ].every((x) => x);\n  }\n\n  toString() {\n    return this.isValid\n      ? `[${this.station.number}] ${this.station.name} (${\n          this.station.bikes\n        } | ${this.station.free})`\n      : 'INVALID';\n  }\n}\n","import {OperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {createStation, parseLatLng, Station} from '~/station';\n\nexport interface SmooveStation {\n  name: string;\n  coordinates: string;\n  total_slots: number;\n  free_slots: number;\n  avl_bikes: number;\n  operative: boolean;\n  style: string;\n}\n\nexport interface Response {\n  result: SmooveStation[];\n}\n\nexport function parseNameAndNumber({name}: SmooveStation, station: Station) {\n  try {\n    const match = /^(\\d+)\\s+(.*)$/.exec(name);\n\n    if (!match) {\n      throw new Error(`Unable to parse \"number name\" from ${name}`);\n    }\n\n    station.number = Number(match[1]);\n    station.name = match[2];\n  } catch (error) {\n    station.errors.push(error);\n  }\n}\n\nexport function create(data: SmooveStation) {\n  const station = createStation({\n    data,\n    bikes: data.avl_bikes,\n    free: data.free_slots,\n    operative: data.operative,\n    total: data.total_slots,\n  });\n\n  parseNameAndNumber(data, station);\n  parseLatLng(data.coordinates, station);\n\n  return station;\n}\n\nexport default map<Response, Station[]>(({result}) => result.map(create));\n","export interface Station extends google.maps.LatLngLiteral {\n  bikes: number;\n  data: any;\n  errors: any[];\n  free: number;\n  name: string;\n  number: number;\n  operative: boolean;\n  total: number;\n}\n\nexport function createStation(station: Partial<Station> = {}): Station {\n  return {\n    data: null,\n    errors: [],\n    bikes: 0,\n    free: 0,\n    lat: 0,\n    lng: 0,\n    name: '',\n    number: 0,\n    operative: false,\n    total: 0,\n    ...station,\n  };\n}\n\nexport function parseLatLng(position: string, station: Station) {\n  try {\n    const match = /^\\s*(-?\\d+\\.\\d+)\\s*,\\s*(-?\\d+\\.\\d+)\\s*$/.exec(position);\n\n    if (!match) {\n      throw new Error(`Unable to parse \"lat, lng\" from ${position}`);\n    }\n\n    station.lat = Number(match[1]);\n    station.lng = Number(match[2]);\n  } catch (error) {\n    station.errors.push(error);\n  }\n}\n","import {OperatorFunction} from 'rxjs';\nimport {Station} from '~/station';\nimport {Smoove} from './transform';\n\nenum StationSourceType {\n  Smoove,\n}\n\nexport interface StationSourceConfig {\n  location: google.maps.LatLngLiteral;\n  name: string;\n  options?: any;\n  type: keyof typeof StationSourceType;\n  uri: string;\n  cors?: boolean;\n}\n\nconst configMap = new Map<string, StationSourceConfig>([\n  [\n    'test',\n    {\n      location: {\n        lat: 49.279627,\n        lng: -123.121116,\n      },\n      name: 'Test Data',\n      type: 'Smoove',\n      uri: '/static_data',\n    },\n  ],\n  [\n    'vancouver',\n    {\n      location: {\n        lat: 49.279627,\n        lng: -123.121116,\n      },\n      name: 'Mobi Bike Vancouver',\n      type: 'Smoove',\n      uri: 'http://vancouver-ca.smoove.pro/api-public/stations',\n      cors: true,\n    },\n  ],\n]);\n\nexport function getConfig(key: string) {\n  const config = configMap.get(key.toLowerCase());\n\n  if (!config) {\n    throw new Error(`No station data for source '${key}'`);\n  }\n\n  return config;\n}\n\nexport function getConfigByLocation(location: google.maps.LatLng) {\n  return Array.from(configMap.values())\n    .map((config) => ({\n      config,\n      distance: google.maps.geometry.spherical.computeDistanceBetween(\n        location,\n        new google.maps.LatLng(config.location.lat, config.location.lng),\n      ),\n    }))\n    .sort((a, b) => a.distance - b.distance)[0].config;\n}\n\nexport type StationSourceTransform = OperatorFunction<any, Station[]>;\n\nexport function mapTransform({\n  type,\n}: StationSourceConfig): StationSourceTransform {\n  switch (type) {\n    case 'Smoove':\n      return Smoove;\n    default:\n      throw new Error(`Invalid Configuration '${type}'`);\n  }\n}\n","import moment from 'moment';\nimport {Observable, of, timer, combineLatest, merge} from 'rxjs';\nimport {ajax} from 'rxjs/ajax';\nimport {tap, map, catchError, mergeMap, debounceTime} from 'rxjs/operators';\nimport {Station, StationNode} from '~/station';\nimport {\n  getConfig,\n  getConfigByLocation,\n  mapTransform,\n  StationSourceConfig,\n  StationSourceTransform,\n} from './config';\n\nexport interface StationSourceResult {\n  config: StationSourceConfig;\n  error?: any[];\n  fetchedAt: moment.Moment;\n  nodes: StationNode[];\n}\n\nexport interface Options {\n  debug?: boolean;\n}\n\nexport class StationSource {\n  public static create(\n    configOrKey: string | StationSourceConfig,\n    {debug}: Options,\n  ) {\n    const config =\n      typeof configOrKey === 'string' ? getConfig(configOrKey) : configOrKey;\n\n    return new StationSource(config, mapTransform(config), debug);\n  }\n\n  public static nearest(location: google.maps.LatLng, options: Options) {\n    return StationSource.create(getConfigByLocation(location), options);\n  }\n\n  readonly config: StationSourceConfig;\n  readonly verboseOutput: boolean;\n  private readonly transform: StationSourceTransform;\n\n  constructor(\n    config: StationSourceConfig,\n    transform: StationSourceTransform,\n    verboseOutput = process.env.NODE_ENV !== 'production',\n  ) {\n    this.config = config;\n    this.transform = transform;\n    this.verboseOutput = verboseOutput;\n  }\n\n  getJSON() {\n    const uri = this.config.cors\n      ? `https://cors.io/?${this.config.uri}`\n      : this.config.uri;\n    this.debug(`Fetching stations from '${uri}' ...`);\n\n    const headers = this.config.options\n      ? this.config.options.headers\n      : undefined;\n    return ajax.getJSON(uri, headers);\n  }\n\n  getStations(source?: Observable<any>) {\n    return (source || this.getJSON()).pipe(\n      tap((response) => {\n        this.debug('Fetch Response', response);\n      }),\n      this.transform,\n      map<Station[], StationSourceResult>((stations) => {\n        this.debug(`Fetched ${stations.length} stations`);\n\n        return {\n          config: this.config,\n          nodes: stations.map((station) => new StationNode(station)),\n          fetchedAt: moment(),\n        };\n      }),\n      catchError((error = {}) => {\n        this.debug(`Fetch failed: ${error.message || 'Unknown Error'}`, error);\n\n        return of<StationSourceResult>({\n          error,\n          config: this.config,\n          fetchedAt: moment(),\n          nodes: [],\n        });\n      }),\n    );\n  }\n\n  watchStations(\n    reloader: Observable<any> = of(true),\n    interval = 300,\n    source?: Observable<any>,\n  ) {\n    return merge(timer(0, 1000 * interval), reloader).pipe(\n      debounceTime(100),\n      mergeMap(() => this.getStations(source)),\n    );\n  }\n\n  protected debug(message: string, ...args: any[]) {\n    if (this.verboseOutput) {\n      if (args.length) {\n        console.log(message, args);\n      } else {\n        console.log(message);\n      }\n    }\n  }\n}\n","import {mapPropsStream, setObservableConfig, withProps} from 'recompose';\nimport {from, Observable, combineLatest} from 'rxjs';\nimport {\n  map,\n  filter,\n  distinctUntilChanged,\n  startWith,\n  mergeMap,\n} from 'rxjs/operators';\nimport {StationSource, StationSourceResult} from '~/data';\nimport {Subject} from 'rxjs/internal/Subject';\n\nsetObservableConfig({\n  fromESObservable: from as any,\n});\n\nexport interface WithQueryParamProps {\n  params: Map<string, string>;\n}\n\nfunction getUrlParams() {\n  const params = new Map<string, string>();\n  new URLSearchParams(window.location.search).forEach((value, key) => {\n    params.set(key.toLowerCase(), value);\n  });\n  return params;\n}\n\nexport const withQueryParams = withProps<WithQueryParamProps, {}>({\n  params: getUrlParams(),\n});\n\ninterface PositionProps {\n  coords?: Coordinates;\n  timestamp?: number;\n  error?: any;\n}\n\nexport interface WithPositionProps {\n  position?: PositionProps;\n}\n\nexport function withPosition(\n  options: PositionOptions = {enableHighAccuracy: true},\n) {\n  const source = new Observable<PositionProps>((observer) => {\n    navigator.geolocation.watchPosition(\n      (position) => {\n        observer.next(position);\n      },\n      (error) => {\n        observer.error({error});\n      },\n      options,\n    );\n  });\n\n  return mapPropsStream<WithPositionProps, {}>((props) => {\n    return combineLatest(\n      source.pipe(startWith(undefined)),\n      props,\n      (position, prev) => {\n        console.log('[position]', position, prev);\n        return {\n          ...prev,\n          position,\n        };\n      },\n    );\n  });\n}\n\nexport interface WithStationsProps {\n  stations?: StationSourceResult;\n  reload(): void;\n}\n\nexport function withStations(defaultKey = 'vancouver') {\n  const reloader = new Subject();\n\n  return mapPropsStream<\n    WithStationsProps,\n    WithStationsProps & WithQueryParamProps\n  >((props) => {\n    const stationsObservable = props.pipe(\n      filter(({params}) => Boolean(params)),\n      map(({params}) => {\n        return {\n          debug: Boolean(params.get('debug')),\n          source:\n            params.get('source') || (params.get('test') ? 'test' : defaultKey),\n        };\n      }),\n      distinctUntilChanged(\n        (a, b) => a.debug === b.debug && a.source === b.source,\n      ),\n      mergeMap(({debug, source}) => {\n        console.log('fetch', {source, debug});\n        return StationSource.create(source, {debug}).watchStations(reloader);\n      }),\n    );\n\n    return combineLatest(stationsObservable, props, (stations, prev) => {\n      console.log('[stations]', stations, prev);\n      return {\n        ...prev,\n        stations,\n        reload: () => {\n          console.log('reload');\n          reloader.next();\n        },\n      };\n    });\n  });\n}\n"],"sourceRoot":""}